<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.whalecar.persistence.UserOrderMapper">

  <insert id="createOrder" parameterType="UserOrder">
    INSERT
    INTO User_Order (orderSn, orderTitle,    orderPrice, shopStock, shop,user,orderState,orderType)
    Values (#{orderSn},#{orderTitle},#{orderPrice},#{shopStock},#{shop},#{user},#{orderState},#{orderType})
  </insert>

  <select id="queryUserOrderBySn" resultType="UserOrder">
    SELECT *
      FROM  User_Order
      WHERE orderSn = #{orderSn}
  </select>

  <select id="queryUserOrderByCondition" resultType="UserOrderView">
        SELECT User_Order.* , User.userName , User.userTel
        FROM  User_Order
        LEFT JOIN User on User_Order.user = User.id
        WHERE
            orderType != 'stock_empty_order'
            <if test="userId != null and userId != ''">
                and User_Order.user = #{userId}
            </if>
            <if test="shopId != null and shopId != ''">
                and User_Order.shop = #{shopId}
            </if>
        ORDER By orderCreateDate desc
  </select>

  <select id="queryStockEmptyUserOrderByCondition" resultType="UserOrderView">
        SELECT User_Order.* , User.userName , User.userTel
        FROM  User_Order
        LEFT JOIN User on User_Order.user = User.id
        WHERE
          orderType = 'stock_empty_order'
        <if test="userId != null and userId != ''">
            and User_Order.user = #{userId}
        </if>
        <if test="shopId != null and shopId != ''">
            and User_Order.shop = #{shopId}
        </if>
        ORDER By orderCreateDate desc
  </select>

  <update id="updateState">
    UPDATE User_Order
      SET orderProcessState = #{state}
      WHERE ID = #{id}
  </update>

  <update id="processUserOrderOutOfDate">
      <![CDATA[

          UPDATE
            User_Order

          SET
            orderState = 'out_of_date'

          where

          (orderState = 'waiting_pay'
          and date_add(orderCreateDate,
          interval 24 hour) > current_timestamp)

          or

          ((orderState <> 'finish' and orderState <> 'cancel' and orderState <> 'out_of_date'  and orderType = 'not_pay_order')
          and date_add(orderCreateDate,
          interval 36 hour) > current_timestamp)

          or

          ((orderState <> 'finish' and orderState <> 'cancel' and orderState <> 'out_of_date'  and orderType = 'pay_order')
          and date_add(orderCreateDate,
          interval 84 hour) > current_timestamp)

      ]]>
  </update>

</mapper>